from Crypto.PublicKey import RSA
import requests
import json

with open('even.txt', 'r') as f:
    key = RSA.import_key(f.read())
    print(f"exp = {key.e}")
    exp = key.e
    print(f"n = {key.n}")
    number = key.n
f.close()

new_2 = pow(2, exp, number)
#print(new_2)
cur = 2
enc = 14911798062783339659832660526663138647819886377912723362282137031221173509351986026155722784845042225140202149709619686477901132299397701210375679295413937333629168036115931780000206914490974932229457721185906946867044311020091741744561137271495249128774614919377156330837695085667388873360219768246599437243175880078516836399467461609435277749661288409012725093474511355041293281727059517373612855097556150055995334735459218523769125284156055604299970252932785624614712318394849720500889337354729726245431746057247555245099902687216610585028335831514119749624746669360261542944978628327876950992533586567752905727976
response1 = requests.post('http://even.tasks.prak.seclab.cs.msu.ru/api/order/place/',
                          data=json.dumps({'order': str((enc * new_2) % number)}),
                          headers={'content-type': 'application/json'}
                          )



a = 0
b = (number) // 2

while b - a > 0:
    new_2 = pow(cur * 2, exp, number)
    cur *= 2
    response1 = requests.post('http://even.tasks.prak.seclab.cs.msu.ru/api/order/place/',
                              data=json.dumps({'order': str((enc * new_2) % number)}),
                              headers={'content-type': 'application/json'}
                              )
    # print(len(str(cur)), response1.status_code, cur, a, b, number // cur)
    mid = (a + b) // 2
    if response1.status_code == 200:
        b = mid - 1
    elif response1.status_code == 400:
        a = mid
        if a % 2 == 1:
            a += 1
        print(a, b, number // cur)
print(a, b)
#
# from Crypto.PublicKey import RSA
# import requests
# import json

# Загрузка ключа RSA из файла
# with open('even.txt', 'r') as f:
#     key = RSA.import_key(f.read())
#     exp = key.e
#     number = key.n
#
# # Подслушанный зашифрованный текст
# enc = 14911798062783339659832660526663138647819886377912723362282137031221173509351986026155722784845042225140202149709619686477901132299397701210375679295413937333629168036115931780000206914490974932229457721185906946867044311020091741744561137271495249128774614919377156330837695085667388873360219768246599437243175880078516836399467461609435277749661288409012725093474511355041293281727059517373612855097556150055995334735459218523769125284156055604299970252932785624614712318394849720500889337354729726245431746057247555245099902687216610585028335831514119749624746669360261542944978628327876950992533586567752905727976
#
# cur = 1  # Начальное значение cur (2^0)
# a = 0
# b = number // 2  # Ищем в диапазоне [0, N/2]
#
# while b - a > 0:
#     new_order = (enc * pow(pow(2, cur), exp, number)) % number  # Заказ с новым зашифрованным значением
#
#     # Отправка заказа
#     response = requests.post('http://even.tasks.prak.seclab.cs.msu.ru/api/order/place/',
#                              data=json.dumps({'order': str(new_order)}),
#                              headers={'content-type': 'application/json'})
#
#     if response.status_code == 200:
#         # Заказ принят, значит 2M < N; продолжаем искать в [a, mid]
#         b = (a + b) // 2
#     elif response.status_code == 400:
#         # Заказ не принят, значит 2M > N; продолжаем искать в [mid + 1, b]
#         a = (a + b) // 2
#         if a % 2 == 1:
#             a += 1
#         print(a, b, number // pow(2, cur))
#
#     cur += 1  # Увеличиваем степень двойки для следующего итерации
#
# print(f"Значение M находится в диапазоне: {a}, {b}")
#3614955247190951319
#1807477623595475668
# print(pow(1807477623595475668, exp, number))
#4461241412349683198992627322896139268115296956735828821224663
#9272036456407591505129232881482985142804793500579976270620466912558371765984989092598702480677081936219737709011893456325416679127195647284011360775373165402352259492862235242448467270426652779163143792617126601062602235376087975497759481435251636780689716136776514680693955443325532955149619114272932686025725893723993446842464742331463

# q = 3614955247190951318
e = 3614955247190951326
# 3614955247190951326
may = pow(e, exp, number)
print(may, enc)

for elem in range(3614955247190951308, 3614955247190951418, 2):
    may = pow(elem, exp, number)
    if may == enc:
        print(elem)